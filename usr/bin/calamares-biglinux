#!/usr/bin/env bash
#shellcheck disable=SC2155,SC2034
#shellcheck source=/dev/null

#  /usr/bin/calamares-biglinux
#  Description: Big Store installing programs for BigLinux
#
#  Created: 2020/01/11
#  Altered: 2024/08/22
#
#  Copyright (c) 2023-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

APP="${0##*/}"
_VERSION_="1.0.0-20240822"
#
LIBRARY=${LIBRARY:-'/usr/share/bigbashview/bcc/shell'}
[[ -f "${LIBRARY}/bcclib.sh" ]] && source "${LIBRARY}/bcclib.sh"
[[ -f "${LIBRARY}/tinilib.sh" ]] && source "${LIBRARY}/tinilib.sh"

#Translation
LANGUAGE=$LANG:en
export TEXTDOMAINDIR="/usr/share/locale"
export TEXTDOMAIN=calamares-biglinux

function sh_calamares_biglinux_verify_md5sum() {
	local Message=$"Checking the file:"
	local Message2=$"Checking for download or USB drive errors, this may take a few minutes..."
	local Verification_canceled=$"Verification canceled."
	local The_files_are_intact=$"The files are intact."
	local f_md5sum_ErrorCode='/tmp/md5sum_big_fail'
	local f_md5sum_ErrorFileName='/tmp/md5sum_ErrorFileName'
	local squashfiles=('desktopfs' 'livefs' 'mhwdfs' 'rootfs')
	local cfile
	local verify
	local nErrorCode
	local cErrorFilename
	declare -i count=0

	[[ -e "$f_md5sum_ErrorCode" ]] && rm -f "$f_md5sum_ErrorCode"
	[[ -e "$f_md5sum_ErrorFileName" ]] && rm -f "$f_md5sum_ErrorFileName"
	if cd /run/miso/bootmnt/manjaro/x86_64/ >/dev/null 2>&-; then
		log_info "${green}${APP} - Checking system integrity...${reset}"
		(
			for cfile in "${squashfiles[@]}"; do
				if ! md5sum --status -c "${cfile}".md5; then
					echo 1 >"$f_md5sum_ErrorCode"
					echo "$cfile" >"$f_md5sum_ErrorFileName"
					break
				fi
				((count += 25))
				printf "%s\n" "$count"
				printf "%s\n" "# $Message2 \n\n $Message ${cfile}.sfs"
			done
			sleep 1
		) |
			zenity \
				--auto-close \
				--progress \
				--title=$"Checking system integrity" \
				--text="$Message2" \
				--percentage=0

		# Captura o código de saída do zenity
		verify="$?"
	else
		# não conseguiu entrar no diretorio dos arquivos de squash
		# provável montagem em outro local ou outro erro
		verify=2
	fi

	# Lê o conteúdo do arquivo /tmp/md5sum_big_fail
	[[ -e "$f_md5sum_ErrorCode" ]] && nErrorCode="$(<$f_md5sum_ErrorCode)"
	[[ -e "$f_md5sum_ErrorFileName" ]] && cErrorFilename="$(<$f_md5sum_ErrorFileName)"

	# Verifica o código de saída e o conteúdo do arquivo
	if [[ "$verify" -eq -1 ]] || [[ "$nErrorCode" == "1" ]]; then
		log_err "${red}${APP} - error: md5sum fail, file: ${cyan}$cErrorFilename{reset}"
		zenity \
			--error \
			--text=$"Integrity error in file: ${cErrorFilename} \n	\
\n 1 - Try restarting the installer. \
\n 2 - Try restarting/rebooting again. \
\n 3 - Download the system again and/or use another USB drive."
		return 1
	elif [[ "$verify" -eq 0 ]]; then
		log_msg "${green}${APP} - md5sum test $The_files_are_intact"
		# Mostra uma mensagem por 3 segundos e depois continua
		zenity \
			--info \
			--text="$The_files_are_intact" \
			--timeout=3
		return 0
	elif [[ "$verify" -eq 2 ]]; then
		local ctextVerify2=$"Error encountered\nUnable to access files for integrity testing. Try restarting the system/installer."
		log_msg "${red}${APP} - error: md5sum test $ctextVerify2"
		# Mostra mensagem que não conseguiu testar os arquivos squashfs
		zenity \
			--info \
			--text="$ctextVerify2"
		return 1
	else
		log_msg "${red}${APP} - md5sum $Verification_canceled"
		zenity \
			--info \
			--text="$Verification_canceled."
		echo 1 >$f_md5sum_ErrorCode
		return 1
	fi
}
export -f sh_calamares_biglinux_verify_md5sum

function sh_calamares_biglinux_check_limit() {
	local limit="$1"
	local grace_time="$2"
	local verify_limit=0

	# Verifica se o parâmetro é '--limit'
	if [[ "$limit" == '--limit' ]]; then
		verify_limit=1

		# Verifica se grace_time é um número válido
		if [[ ! "$grace_time" =~ ^-?[0-9]+$ ]]; then
			grace_time=30 # Define um valor padrão se não for um número válido
		fi
	else
		# Valor padrão para verify_limit se não for '--limit'
		grace_time=30
	fi

	# verifica se foi definido um limite como parametro
	if ((verify_limit)); then
		# Obtém o timestamp atual em dias desde a época UNIX
		current_day=$(($(date +%s) / 86400))

		# Obtém o timestamp do arquivo, também em dias desde a época UNIX
		release_day=$(grep 'UNIX_TIMESTAMP=' /etc/big-release | cut -d '=' -f2)

		# dias passados desde instalacao
		days_until_today=$(((current_day - release_day)))

#				--field=$"<b>Do you want to proceed with the installation of this old version anyway?</b>
#    :LBL" \

		# Calcula a diferença
		if ((current_day > release_day + "$grace_time")); then
			# if the ISO was generated more than 30 days ago, issue ALERT
			local ctextReleaseOld=$"BigLinux is a system with weekly updates and this version was released more than $days_until_today days ago.
We recommend downloading a more recent version.
\nDo you want to proceed with the installation of this old version anyway?"
			log_info "${red}${APP} - $ctextReleaseOld"
			if ! yad --image=emblem-warning \
				--image-on-top \
				--form \
				--width=500 \
				--height=100 \
				--fixed \
				--align=center \
				--text "$ctextReleaseOld" \
				--button=$"Continue":0 \
				--button=$"Close":1 \
				--center \
				--on-top \
				--borders=20 \
				--title=$"Outdated Version" \
				--window-icon=emblem-warning; then
				exit 1
			fi
		fi
	fi
}
export -f sh_calamares_biglinux_check_limit

function sh_calamares_biglinux_wait_verify_md5sum() {
	# aguarda o teste com md5sum
	if pgrep -x "biglinux-verify" >/dev/null; then
		windowID="$(xprop -root '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)"
		sleep 600 | zenity \
			--attach="$windowID" \
			--width=300 \
			--progress \
			--title=$"Please wait..." \
			--pulsate \
			--no-cancel \
			--auto-close \
			--text $"Checking the integrity of the download and storage device..." &
	fi
	while pgrep -x "biglinux-verify" >/dev/null; do
		sleep 1
	done
	killall zenity
}
export -f sh_calamares_biglinux_wait_verify_md5sum

function sh_calamares_biglinux_main() {
	local limit="$1"
	local grace_time="$2"

	if [[ "$limit" == '--limit' ]]; then
		sh_calamares_biglinux_check_limit "$limit" "$grace_time"
	fi

	sh_calamares_biglinux_wait_verify_md5sum

	# Verifica se o arquivo de verificação de checksum não existe
	if [[ ! -f "/tmp/checksum_biglinux_ok.html" ]]; then
		# Executa a verificação de MD5
		if ! sh_calamares_biglinux_verify_md5sum; then
			exit 1
		fi
	fi

	# desabilita a troca/swap no(s) disco(s)
	for diskswap in $(awk -F: '/TYPE="swap"/ && $0 !~ /zram/ {print $1}' <<<$(blkid)); do
		swapoff $diskswap
	done

	if test -e /usr/share/calamares/branding/biglinux/show.qml; then
		if [ "${LANG:0:2}" = "pt" ]; then
			sed -i 's|pt/|pt/|g' /usr/share/calamares/branding/biglinux/show.qml
		elif [ "${LANG:0:2}" = "es" ]; then
			sed -i 's|pt/|es/|g' /usr/share/calamares/branding/biglinux/show.qml
		else
			sed -i 's|pt/|en/|g' /usr/share/calamares/branding/biglinux/show.qml
		fi
	else
		log_err "${red}${APP} - error: File not found: ${cyan}/usr/share/calamares/branding/biglinux/show.qml${reset}"
	fi

	if [[ ! -f "/etc/calamares/biglinux" ]]; then
		# Simplify welcome
		echo '---
showSupportUrl:         false
showKnownIssuesUrl:     false
showReleaseNotesUrl:    false

requirements:
    internetCheckUrl: https://google.com
    requiredStorage:    4
    requiredRam:        0.5
    check:
      - storage
      - ram
      - power
      - internet
      - root
    required:
      - storage
      - ram
      - root

geoip:
    style:    "none"
    url:      "https://geoip.kde.org/v1/ubiquity"
    selector: "CountryCode"
      ' >/etc/calamares/modules/welcome.conf

		# Force btrfs compression using zstd
		sed -i '/filesystem: btrfs/!b; :a; n; /^\s\{6\}options:/ s/defaults.*/defaults, noatime, compress-force=zstd:9 ]\n      ssdOptions: [ discard=async ]\n      hddOptions: [ autodefrag ]/; ta' /usr/share/calamares/modules/mount.conf

		# btrfs: defaults,noatime,autodefrag,compress=zstd
		#sed -i 's|btrfs: defaults|btrfs: defaults,noatime,compress=zstd|g' /usr/share/calamares/modules/fstab.conf
		#sed -i 's|btrfs: discard=async,ssd|#btrfs: discard=async,ssd|g' /usr/share/calamares/modules/fstab.conf
		#sed -i 's|ssdExtraMountOptions:|#ssdExtraMountOptions:|g' /usr/share/calamares/modules/fstab.conf

		# Use btrfs for default
		sed -i 's|defaultFileSystemType.*"ext4"|defaultFileSystemType:  "btrfs"|g' /usr/share/calamares/modules/partition.conf

		# Change initcpio to systemd
		#sed -i 's|"base", "udev"|"systemd"|g' /usr/lib/calamares/modules/initcpiocfg/main.py

		# Clean initcpio
		#sed -i 's|, "keyboard", "keymap", "consolefont"||g' /usr/lib/calamares/modules/initcpiocfg/main.py

		# Change initcpio plymouth to sd version
		sed -i 's|"plymouth"|"kms plymouth"|g' /usr/lib/calamares/modules/initcpiocfg/main.py

		# not disable pacman-init
		# sed -i '/^disable:/,$d' /usr/share/calamares/modules/services.conf

		# failsafe if services not generated in boot
		if [ "$(cat /etc/calamares/modules/services.conf | wc -l)" -lt "15" ]; then

			echo 'services:
    - name: bluetooth
      mandatory: false

    - name: cronie
      mandatory: false

    - name: ModemManager
      mandatory: false

    - name: NetworkManager
      mandatory: false

    - name: cups
      mandatory: false

    - name: haveged
      mandatory: false

    - name: fstrim.timer
      mandatory: false

    - name: pkgfile-update.timer
      mandatory: false

    - name: vboxservice
      mandatory: false

    - name: ufw
      mandatory: false

    - name: nmb
      mandatory: false

    - name: smb
      mandatory: false

    - name: set-cfs-tweaks
      mandatory: false

    - name: dnsmasq
      mandatory: false

    - name: cups-browsed
      mandatory: false

    - name: sddm
      mandatory: false

targets:
    - name: "graphical"
      mandatory: true

disable:
    - name: pacman-init
      mandatory: false' >/etc/calamares/modules/services.conf

		fi

		sed -i 's|timers:||g' /etc/calamares/modules/services.conf

		echo "
---
defaultGroups:
    - cdrom
    - floppy
    - audio
    - dip
    - video
    - plugdev
    - netdev
    - lpadmin
    - scanner
    - bluetooth
    - vboxsf
    - sambashare
    - input
    - scard
    - lp
    - network
    - power
    - sys
    - wheel
autologinGroup:  autologin
doAutologin:     false
sudoersGroup:    wheel
setRootPassword: false
doReusePassword: false
availableShells: /bin/bash, /bin/zsh
avatarFilePath:  ~/.face
userShell:       /bin/bash
passwordRequirements:
    nonempty: true" >/etc/calamares/modules/users.conf

		echo '---
keyrings:
    - archlinux
    - manjaro
    - biglinux' >/etc/calamares/modules/postcfg.conf

		#sed -i 's|initialSwapChoice: none|initialSwapChoice: small|g' /etc/calamares/modules/partition.conf

		# General configuration
		echo '---
modules-search: [ local ]

sequence:
    - show:
        - welcome
        - locale
        - keyboard
        - partition
        - users
        - summary
    - exec:
        - partition
        - mount
        - unpackfs
        - networkcfg
        - machineid
        - fstab
        - locale
        - keyboard
        - localecfg
        - luksopenswaphookcfg
        - luksbootkeyfile
        - initcpiocfg
        - initcpio
        - users
        - displaymanager
        - mhwdcfg
        - hwclock
        - services
        - grubcfg
        - bootloader
        - grubcfg-fix
        - postcfg
        - btrfs-fix
        - umount
    - show:
        - finished

branding: biglinux

prompt-install: true

dont-chroot: false
oem-setup: false
disable-cancel: false
disable-cancel-during-exec: false
quit-at-end: false' >/etc/calamares/settings.conf

		touch /etc/calamares/biglinux
	fi

	# Disable pacman-key populate
	sed -i -e '/init_keyring/s/^/#/' -e '/self.populate_keyring/s/^/#/' /usr/lib/calamares/modules/postcfg/main.py

	#save EFI partitions
	rm -f /tmp/efi-partitions >/dev/null 2>&-
	mkdir -p /boot/efi >/dev/null 2>&-

	DEVICE_LIVE_BOOT_TMP="$(readlink -f "$(df -h /run/miso/bootmnt/ | awk '{ print $1 }' | grep '/dev/')" | sed 's|/dev/||'g)"
	if [[ "$(echo "$DEVICE_LIVE_BOOT_TMP" | grep dm)" != "" ]]; then
		DEVICE_LIVE_BOOT="$(ls /sys/block/${DEVICE_LIVE_BOOT_TMP}/slaves | sed 's|[0-9]||g')"
	else
		DEVICE_LIVE_BOOT="$DEVICE_LIVE_BOOT_TMP"
	fi

	for i in $(LC_ALL=C fdisk -l | grep -e "EFI System" -e "FAT" | cut -f1 -d" " | grep -v "$DEVICE_LIVE_BOOT"); do
		umount -l /boot/efi >/dev/null 2>&-
		mount "$i" /boot/efi >/dev/null 2>&-
		if [ -d /boot/efi/EFI ]; then
			echo "$i" >>/tmp/efi-partitions
		fi
		umount -l /boot/efi >/dev/null 2>&-
	done

	# Umount partitions
	for i in $(blkid | grep -v 'TYPE="swap"' | grep -v 'TYPE="squashfs"' | grep -v '^/dev/sr0' | cut -f1 -d":"); do
		umount "$i" >/dev/null 2>&-
	done

	# boot EFI without partition EFI
	if [[ -d /sys/firmware/efi ]] && [[ "$(cat /tmp/efi-partitions)" = "" ]]; then
		LIVEBOOT=EFI
		PARTITION=LEGACY
		TEXT_01=$"Do you want to proceed with the installation in EFI mode?"
		TEXT_02=$"The current boot is using <span color='#CC2222'>EFI</span> mode, but I did not find any EFI partition on this computer.

If this computer already has another system installed and you intend
to keep it installed, you will probably need to change the
configuration in the BIOS to boot in Legacy mode, also
called BIOS mode."
		if ! yad	--image=drive-harddisk --image-on-top --form \
			--width=500 --height=100 --fixed	--align=center \
			--field="<b>$TEXT_01</b>:LBL"			--text "$TEXT_02"	--button=$"Continue"!gtk-apply:0 \
			--button=$"Close"!gtk-cancel:1		--center					--on-top	--borders=20 \
			--title=$"Install the system"			--window-icon="/usr/share/icons/hicolor/scalable/apps/icon-big-hd-install.svg"; then
			exit
		fi
	# legacy boot and EFI partition
	elif [[ ! -d /sys/firmware/efi ]] && [[ "$(cat /tmp/efi-partitions)" != "" ]]; then
		LIVEBOOT=LEGACY
		PARTITION=EFI
		TEXT_03=$"Do you want to proceed with the installation in Legacy/BIOS mode?"
		TEXT_04=$"The current boot is using <span color='#CC2222'>Legacy/BIOS</span> mode, but I found at least one EFI partition on this computer.

For the installation to be successful, you will probably need to
change the configuration in the BIOS to boot in EFI or UEFI mode."
		if ! yad 	--image=drive-harddisk 					--image-on-top 		--form  \
							--width=500 										--height=100 			--fixed --align=center \
							--field="<b>$TEXT_03</b>:LBL" 	--text "$TEXT_04"	--button=$"Continue"!gtk-apply:0 \
							--button=$"Close"!gtk-cancel:1	--center --on-top	--borders=20 \
							--title=$"Install the system" 	--window-icon="/usr/share/icons/hicolor/scalable/apps/icon-big-hd-install.svg"; then
			exit
		fi
	fi

	rm -f /tmp/start_calamares

	cd /usr/share/bigbashview/apps/calamares/
	bigbashview \
		-s 1100x600 \
		-n $"Install System" \
		-p bbv-calamares \
		-c transparent \
		-w frameless \
		index.html

	# Start calamares
	if [[ -e "/tmp/start_calamares" ]]; then
		if [[ -e /usr/share/biglinux/themes/biglinux/.config/kdeglobals ]]; then
			cp -f /usr/share/biglinux/themes/biglinux/.config/kdeglobals /root/.config/kdeglobals
		fi
		sudo QT_QUICK_BACKEND=software /usr/bin/calamares-manjaro

		#Calamares failed to install
		if [[ "$(grep -w completion /root/.cache/calamares/session.log | grep -v bash-completion | rev | cut -d ":" -f1 | rev | sed 's/^[ \t]*//;s/[ \t]*$//')" != "succeeded" ]]; then
			# if [ "$(grep completion /root/.cache/calamares/session.log | rev | cut -d ":" -f1 | rev | sed 's/^ \+//')" = "failed" ];then
			user=$(ls /home)
			cp /root/.cache/calamares/session.log /home/$user/calamares.log
			chown $user:$user /home/$user/calamares.log

			function send() {
				sudo -u $user curl --data-binary -H "filename: /home/$user/calamares.log" https://filebin.net | tee "/home/$user/transfer.url" | zenity --modal --progress --pulsate --no-cancel --auto-close --text $"Sending, please wait..."
				if [[ -f /usr/bin/falkon ]]; then
					sudo -u $user falkon https://filebin.net/$(cat "/home/$user/transfer.url" | grep '"id": "' | cut -f4 -d'"')
				elif [[ -f /usr/bin/brave ]]; then
					sudo -u $user brave-browser --new-window --no-sandbox https://filebin.net/$(cat "/home/$user/transfer.url" | grep '"id": "' | cut -f4 -d'"')
				fi
			}

			yad \
				--buttons-layout=center \
				--width=480 \
				--button=$"Open":1 \
				--button=$"Send to the cloud":2 \
				--button=$"Close":3 \
				--title=$"calamares LOG" \
				--text=$"\nDo you want to view or send the installation log file to the cloud?\nGenerate a link to send in support groups.\n"

			case $? in
			1) sudo -u $user kate /home/$user/calamares.log ;;
			2) send ;;
			3) echo $"Closing file..." ;;
			esac
		fi
	fi
}
export -f sh_calamares_biglinux_main

sh_calamares_biglinux_main "$@"
